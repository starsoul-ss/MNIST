### 任务一
```
#不使用随机梯度下降，训练效果为
epoch 0, loss 0.6931471805599453
epoch 10, loss 11.019536288335201
epoch 20, loss 11.564759505096744
epoch 30, loss 4.4176265677386795
epoch 40, loss 4.192330057988733
epoch 50, loss 3.2532808006939575
epoch 60, loss 5.037377622885878
epoch 70, loss 2.943031271721957
epoch 80, loss 6.048331553824074
epoch 90, loss 3.384263668151373
accuracy 0.834603316898252
precision 0.7583559168925023
recall 0.9891016200294551
f1 score 0.85849418381695
roc_auc 0.8323312830286755

#使用随机梯度下降后
epoch 0, loss 0.6931471805599453
epoch 10, loss 1.000000082790371e-10
epoch 20, loss 1.000000082790371e-10
epoch 30, loss 1.000000082790371e-10
epoch 40, loss 1.000000082790371e-10
epoch 50, loss 1.000000082790371e-10
epoch 60, loss 1.000000082790371e-10
epoch 70, loss 1.000000082790371e-10
epoch 80, loss 1.000000082790371e-10
epoch 90, loss 1.000000082790371e-10
accuracy 0.6228895861347676
precision 0.5757523047486519
recall 0.9749631811487481
f1 score 0.7239720034995626
roc_auc 0.617712033266915

#增加训练epoch
epoch 0, loss 0.6931471805599453
epoch 100, loss 23.02585084720009
epoch 200, loss 1.000000082790371e-10
epoch 300, loss 1.000000082790371e-10
epoch 400, loss 1.000000082790371e-10
epoch 500, loss 1.000000082790371e-10
epoch 600, loss 1.000000082790371e-10
epoch 700, loss 1.000000082790371e-10
epoch 800, loss 1.000000082790371e-10
epoch 900, loss 1.000000082790371e-10
accuracy 0.7531749589122965
precision 0.6765242049827831
recall 0.9837997054491899
f1 score 0.8017282765242438
roc_auc 0.749783418522048

#其中loss处于某个极小值，是因为loss函数中补充的定义，避免对数运算遇到0
```

### 任务二
```
#一开始遇到各类维度问题，使用数据集批量训练结果为
epoch 0, loss 15.393573474472328
epoch 10, loss 10.882675444216845
epoch 20, loss 4.842918462147236
epoch 30, loss 3.795052919019535
epoch 40, loss 5.507113328304762
epoch 50, loss 4.137006102820646
epoch 60, loss 3.789518211519041
epoch 70, loss 4.278152517955312
epoch 80, loss 4.903281935662387
epoch 90, loss 3.814428814142532
accuracy 0.7887344987300164
macro precision 0.8263873558028104
macro recall 0.7873940990133981
macro f1 score 0.7789583539317969
roc_auc 0.9293404706047939
[[565   0   8  12   1  34   5   2   0   3]
 [  0 714   6  12   0   6   4   0   2   4]
 [  8   9 591  31   3   1  18   9   6  15]
 [  4   2   9 627   0  34   2   5   1  15]
 [  2   6   3   2 403   4  23   2   2 225]
 [ 11   7   4  43   5 487  13   5   3  18]
 [ 15   2  12   5   6  26 570   1   0   2]
 [  0   6  27  17   2   0   0 504   0 142]
 [  5  38  30 168   9  87  26   8 202  87]
 [  5   5   3  14   6   6   2   3   0 616]]

 #修改为随机梯度下降，计算速度提升，但是性能相对下降
 epoch 0, loss 18.420680743952364
epoch 100, loss 18.420680743952367
epoch 200, loss 18.420680743952367
epoch 300, loss -9.999999889225291e-09
epoch 400, loss -9.999999889225291e-09
epoch 500, loss 18.420680743952367
epoch 600, loss -9.999999889225291e-09
epoch 700, loss -9.999999889225291e-09
epoch 800, loss 18.420680743952367
epoch 900, loss 18.420680743952367
accuracy 0.7252353204840879
macro precision 0.7590853676367318
macro recall 0.7171037587289216
macro f1 score 0.708793679079791
roc_auc 0.8463694425483215
[[316   0  49  49   3  66  81  32  33   1]
 [  0 650  24  11   2   0   7   4  49   1]
 [  1   5 557  23  32   0  29  30  13   1]
 [  0  12  44 594   0   5   2  27  12   3]
 [  0   2   2   5 594   0  18  14  16  21]
 [  0   3  15 170  24 248  28  55  51   2]
 [  2   1  21   8  43   7 540   0  17   0]
 [  0   8  14  11  12   0   0 649   2   2]
 [  0  23  23  61  17   4  17  54 457   4]
 [  4   7   6  31 185   3   2 166   7 249]]
```